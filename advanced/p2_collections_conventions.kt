package advanced

//          get and set ( array access operators )

class LongList(vararg ints: Int) {
    val state = ints.toMutableList()
    operator fun get(idx: Int): Int = state[idx]

    operator fun set(idx: Int, value: Int) {
        state[idx] = value
    }

    operator fun contains(int: Int): Boolean = state.contains(int)

}

fun example1(){
    LongList(1,2,3,4,5)[2] // [2] => get(2)
    LongList(1,2,3,4,5)[2] = 5 // will replace 3 with 5
    if ( 5 in LongList(1,2,3,4,5)){ //todo: step into the in operator using IDEA
        println("im in !")
    }

}

//      destruction

class P(val x: Int, val y: Int){
    operator fun component1() = x
    operator fun component2() = y
}

fun example2() {
    val (a,b) = P(1,2) // a == 1, b == 2
}


data class Coordinate(val x: Int, val y: Int)

fun example3() {
    val (a,b) = Coordinate(1,2) // a == 1, b == 2
    // data classes have component operators generated by the compiler
    Coordinate(1,2).let { (a,b) -> // destructing an object in a lambda arg list
        println("destructing ($a,$b)")
    }
}



